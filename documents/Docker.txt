*****************************
*       DOCKER ENGINE       *
*****************************

# Instalar Engine de Docker (desde repositorios): 
	1. Actualiza e instala:
		sudo apt-get update
		sudo apt-get install \
		apt-transport-https \
		ca-certificates \
		curl \
		gnupg \
		lsb-release

	2. Agrega GPG key oficial de docker:
		curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

	3. Pon el repositorio estable:
		echo \
  		"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  		$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null


# Instalar Docker Engine en su última versión:
 	sudo apt-get update
 	sudo apt-get install docker-ce docker-ce-cli containerd.io


# Verficar su instalación:
	sudo docker version




******************************
*       DOCKER-COMPOSE       *
******************************

# Instalar docker-compose :
	1.(linux - versión estable):
		sudo curl -L "https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

	2. Dar permisos de ejecución al binario:
		sudo chmod +x /usr/local/bin/docker-compose

	3. Verificar instalación:
		docker-compose version




*******************************
*       COMANDOS VARIOS       *		
*******************************

# Buscar imagen. (https://hub.docker.com)
	docker search "imagen"		ejem: 	docker search nginx

# Descargar imagen:
	docker pull "imagen"		ejem:	docker pull nginx

# Mostrar imagenes descargadas:
	docker images

# Eliminar imagen:
	docker rmi "imagen"		ejem:	docker rmi nginx

# Ejecutar imagen, crear contenedor y descargar imagen:
	docker run "imagen"		ejem:	docker run httpd

# Crear imagen con nombre(-t) de un directorio docker (.):
	docker build -t "nombre" .		

# Listar imagenes por id's:
	docker images -aq

# Eliminar todas las imagenes por id's:
	docker rmi $(docker images -aq)

# Mostrar contenedores en ejecución:
	docker ps

# Mostrar historia de contenedores ejecutados:
	docker ps -a

# Borrar contenedor:
	docker rm "id/name"

# Reactivar contenedor:
	docker start "id/name"		ej:	docker start awesome_dubin

# Parar contenedor en ejecución:
	docker stop "id/name"		ej:	docker stop_nifty

# Ejecutar imagen de manera interactiva emulando terminal:
	docker run -it "imagen" bash		ejem:	docker -it ubuntu bash

# Ejecutar servidor web en segundo plano (-d), nombre personalizado (--name "nombre")y redirección de puertos (-p 8080:80):
	docker run -d -p 8080:80 --name ServerWeb77 nginx

# Eliminar todos los contenedores (elimina lo que se muestra con ps -aq (id's) y fuerza (-f) eliminando también contenedores en ejecución):
	docker rm $(docker ps -aq) -f	

# Ejecutar contenedor con variable de entorno (-e):
	docker run -d -p 3307:3306 --name mydatabase -e	MYSQL_ROOT_PASSWORD=contraseña mysql

# Ejecutar comando en contenedor de manera interactiva emulando terminal:
	docker exec -it "idcontainer" sh

# Mostrar logs en tiempo real de los contenedores:
	docker logs -f "ID container/name"

# Logearse a hub.docker.com por terminal:
	docker login

# Subir imagen a cuenta de hub.docker.com
	docker push "IDusuario/directorio"




*********************************************************
*      Ejemplo práctico: Docker-Compose & OpenVPN       *
*********************************************************

# Repositorio configuración:
https://github.com/pablokbs/peladonerd/tree/master/varios/6

# Crea un archivo docker-compose.yaml
version: '2'
services:
  openvpn:
    cap_add:
     - NET_ADMIN
    image: kylemanna/openvpn
    container_name: openvpn
    ports:
     - "1194:1194/udp"
    restart: always
    volumes:
     - ./openvpn-data/conf:/etc/openvpn

# Inicializa los archivos de configuracion y certificados
	docker-compose run --rm openvpn ovpn_genconfig -u udp://77.777.77.777	(IP-Servidor)
	docker-compose run --rm openvpn ovpn_initpki

# Arregla tus permisos (puede no ser necesario si ya estás haciendo todo con root):
	sudo chown -R $(whoami): ./openvpn-data

# Inicia el contenedor de OpenVPN:
	docker-compose up -d

# Puedes ver los logs de contenedor con:
	docker-compose logs -f

# Generar un certificado de cliente:
	export CLIENTNAM=nombrecliente

# Con Contraseña:
	docker-compose run --rm openvpn easyrsa build-client-full $CLIENTNAME

# Sin Contraseña:
	docker-compose run --rm openvpn easyrsa build-client-full $CLIENTNAME nopass

# Crea el archivo de configuración del cliente:
	docker-compose run --rm openvpn ovpn_getclient $CLIENTNAME > $CLIENTNAME.ovpn

# Revoca el certificado de un cliente. Dejando los archivos crt, key y req.
	docker-compose run --rm openvpn ovpn_revokeclient $CLIENTNAME

# Borrando los correspondientes archivos crt, key y req.
	docker-compose run --rm openvpn ovpn_revokeclient $CLIENTNAME remove

# Descargar openvpn-client:
	https://openvpn.net/vpn-client/

# Descargar el archivoconfiguracioncliente.ovpn
	Linux: scp root@"ipserver":"cliente.ovpn" .   (si se encuentra en /home)
	W10: FileZilla FTP Client

# Comprobar tráfico VPN:
	En el server (escuchar):
	sudo tcpdump -envi eth0 host 8.8.8.8

	En el cliente:
	ping 8.8.8.8





# FUENTES y enlaces de interes
	Docker docs manual:
	https://docs.docker.com/engine/

	Youtube:
	Fazt: https://www.youtube.com/watch?v=NVvZNmfqg6M
	Pelado Nerd: https://www.youtube.com/watch?v=CV_Uf3Dq-EU









