*************************
*          SQL          *	
*************************

# FUNDAMENTOS SQL.
Registro: Conjunto de campos que contienen los datos relacionados con una misma entidad u objeto (Record = Row = tuple = Single entry) 
Consulta: Es una solicitud de infromación contenida en una base datos o en una tabla.
 

# TIPOS DE COMANDOS:

DATA DEFINITION LANGUAGE (DDL):		(Para añadir, eliminar y modificar la estructura de la base de datos)
- CREATE: Crea bases de datos, tablas y usuarios
	CREATE DATABASE db_name
	CREATE TABLE table_name
	CREATE USER user_name FOR LOGIN login_name;
	CREATE ROLE		(Para asignar permisos a usuarios)
	CREATE PROCEDURE procedure_name AS sql_statement GO;
	CREATE INDEX index_name ON table_name;
- DROP: Elimina tablas e índices.
	DROP DATABASE db_name
	DROP TABLE table_name
	DROP VIEW view_name
- ALTER: Modifica tablas.
	ALTER TABLE Clientes ADD Nombre VARCHAR(30);
	ALTER TABLE Clientes DROP COLUMN Nombre;


DATA MANIPULATION LANGUAGE (DML):
- SELECT: Consulta registros de una base de datos.
	SELECT ... FROM ... WHERE ...
	REVOKE SELECT ON employee FROM user1	(quita permisos de acceso a la base de datos a user1)
- INSERT: Carga lotes de datos, mediante una única consulta.
	INSERT INTO ... VALUES ...
- UPDATE: Modfica valores de los campos y registros específicos.
	UPDATE ... SET ... WHERE ...
- DELETE: Elimina registros de una tabla de una base de datos.
	DELETE FROM ... WHERE ...


# RESTRICCIONES (CONSTRAINT):
- NOT NULL: No deja poner un campo vacío
- UNIQUE: Asegura que todos los valores de una columna son diferentes.
- CHECK: Todos los valores de una columna satisfacen una condición específica.
- DEFAULT: Valores por defecto en una columna cuando no se especifican datos.
- INDEX: Crea y recupera datos de la base de datos rápidamente. (bitmap, b-tree, hash)


# TIPOS DE DATOS::
- BINARY: almacena y acepta núimeros binarios (cantidad exacta). EJ: BINARY(20)
- VARBINARY: como binary, pero con cantidad máxima. EJ : VARBINARY(20)
- CHAR: almacena carácteres, cantidad exacta y límite 8000 carácteres. EJ: CHAR(10)
- VARCHAR: almacena carácteres con un máximo. EJ: VARCHAR(10)
- DATETIME: almacena datos en formato de fecha, rango 1/1/1753 - 31/12/9999
- DATETIME2: extiende el rango de compatibilidad, rango 1/1/0001 - 31/12/999
- SMALLDATETIME: almacena fecha en un rango 1/1/1900 - 6/7/2079
- IMAGE: almace gran cantidad de binario-variable orientado a imágenes, rango 2GB de infromación.
- INT: maneja tipos de datos entero, rango -2.147.483.648 - 2.147.483.647
- TINYINT: igual que INT con rango 0 - 255
- BIGINT: duplica cantidad de INT.
- SMALLINT: almacena datos numéricos de rango -32.768 - 32.767
- MONEY: almacena datos numéricos en formato moneda, rango -922.337.203.685.477,5808 - 922.337.203.685.477,5807
- SMALLMONEY: acepta datos numeros en formato moneda con rango -214.748,3648 - 214.748,3647
- NUMERIC or DECIMAL: almacena número en formato decimal/fraccionario. 




*************************
*         MySQL         *
*************************
- MySQL: utiliza un modelo de bases de datos relacional.
- Al relacinar los datos se evita que haya contenido duplicado.
- El contenido se relaciona por medio de Llaves (Llave Primaria y Llave Foranea)


# Tipos de datos:
- Numericos: INT, TINYINT, BIGINT, FLOAT
- String: VARCHAR(), TEXT, CHAR
- Fecha y hora: DATE, DATETIME, TIME, TIMESTAMP
- Otros: BLOB O JSON


# CONFIGURACIÓN DESDE TERMINAL. EJEMPLO PRÁCTICO:
mysql -u root -p

# Listar bases de datos:
SHOW DATABASES;

# Crear base de datos:
CREATE DATABASE MyEmpresa;

# Utilizar base de datos especifica:
USE MyEmpresa;

# Crear tabla:
CREATE TABLE Clientes(id INT (11) NOT NULL AUTO_INCREMENT, Nombre VARCHAR(60) NOT NULL, Apellido VARCHAR(60) NOT NULL, Direccion VARCHAR(60) NOT NULL, PRIMARY KEY (id));

# Mostrar tablas creadas:
SHOW TABLES;

# Mostrar tabla detallada:
DESCRIBE Clientes;

# Ingresar datos la tabla:
INSERT INTO Clientes (Nombre, Apellido, Direccion) VALUES ('Pepo', 'Pitt', 'Alacant');
INSERT INTO Clientes (Nombre, Apellido, Direccion) VALUES ('Pepa', 'Perez', null);

# Mostrar datos de la tabla:
SELECT * FROM Clientes;
	
# Modificar datos de la tabla:
UPDATE Clientes SET Nombre = 'Pepita', Direccion = 'Valencia' WHERE id = 2;

# Renombrar una columna de la tabla:
exec sp_rename 'Clientes.Direccion', 'Domicilio', 'COLUMN';		(renombra columna Domicilio por Direccion)

# Renombrar tabla:
exec sp_rename 'Clientes, 'Amigos';

# Eliminar tabla completa:
DROP TABLE Amigos;

# Borrar datos/registros de la tabla:
DELETE FROM Clientes WHERE id = 1;

# Agregar columna  o campo a la tabla:
ALTER TABLE Clientes ADD Email VARCHAR(30);

# Eliminar columna de la tabla:
ALTER TABLE Clientes DROP COLUMN Email;

# Ordenar/filtrar datos/registros de la tabla:
SELECT * FROM Clientes ORDER BY id;
SELECT * FROM Clientes ORDER BY id DESC;		(Ordenar por ID en forma descendente)
SELECT * FROM Clientes ORDER BY id ASC;			(Ordenar por ID en forma ascendente "default")
SELECT * FROM Clientes WHERE id = 2;			(muestra fila con id = 2)(Otros operadores: =, !=, >, <, >=, <=, Between)
SELECT * FROM Clientes WHERE id BETWEEN 1 AND 2;
SELECT * FROM Clientes WHERE Nombre LIKE 'Pepo%'	(Busca y muestra los nombres que empieza por Pepo)
SELECT DISTINCT Nombre FROM Clientes;			(muestra registros únicos, elimina repeticiones  )
SELECT COUNT(id), Nombre FROM Clientes GROUP BY Nombre ORDER BY COUNT(id) DESC;		(Contador, que muestra cuantos nombres hay acumulados,en forma descendente) 
SELECT CONCAT(Nombre, ' ', Apellido) AS 'Nombre Completo', Direccion FROM Clientes WHERE CONCAT(Nombre, ' ', Apellido) LIKE '%Pepo Pitt%';		(Concatenar dos columnas)
SELECT * FROM Reservas WHERE Fecha = '2021-05-03' AND Mesas IN (2,3);		(Filtrar reservas de mesas 2 y 3 para la fecha 2021-05-03)










